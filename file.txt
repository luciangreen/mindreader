[trace]  ?- caw00(off,[n,f],[[[n,append],2,1],[[n,delete],2,1],[[n,head],1,1],[[n,tail],1,1],[[n,member],1,1]],2,8,_InputVarList,_OutputVarList,[],_Program2,Ps).
   Call: (8) caw00(off, [n, f], [[[n, append], 2, 1], [[n, delete], 2, 1], [[n, head], 1, 1], [[n, tail], 1, 1], [[n, member], 1, 1]], 2, 8, _16552, _16554, [], _16558, _16560)
   Unify: (8) caw00(off, [n, f], [[[n, append], 2, 1], [[n, delete], 2, 1], [[n, head], 1, 1], [[n, tail], 1, 1], [[n, member], 1, 1]], 2, 8, _16552, _16554, [], _16558, _16560)
   Call: (9) repeat
   Exit: (9) repeat
   Call: (9) randvars(2, 2, [], _17132)
   Unify: (9) randvars(2, 2, [], _17132)
   Call: (10) random:random(_17126)
   Unify: (10) random:random(_17126)
   Call: (11) _17126 is random_float
   Exit: (11) 0.3814023340532047 is random_float
   Exit: (10) random:random(0.3814023340532047)
   Call: (10) _17148 is round(97+0.3814023340532047*2)
   Exit: (10) 98 is round(97+0.3814023340532047*2)
   Call: (10) char_code(_17148, 98)
   Exit: (10) char_code(b, 98)
   Call: (10) _17160=[v, b]
   Exit: (10) [v, b]=[v, b]
   Call: (10) lists:member([v, b], [])
   Fail: (10) lists:member([v, b], [])
   Redo: (9) randvars(2, 2, [], _17166)
   Call: (10) lists:append([], [[v, b]], _17170)
   Unify: (10) lists:append([], [[v, b]], [[v, b]])
   Exit: (10) lists:append([], [[v, b]], [[v, b]])
   Call: (10) _17172 is 2+ -1
   Exit: (10) 1 is 2+ -1
   Call: (10) randvars(1, 2, [[v, b]], _17178)
   Unify: (10) randvars(1, 2, [[v, b]], _17178)
   Call: (11) random:random(_17172)
   Unify: (11) random:random(_17172)
   Call: (12) _17172 is random_float
   Exit: (12) 0.8758702925960795 is random_float
   Exit: (11) random:random(0.8758702925960795)
   Call: (11) _17194 is round(97+0.8758702925960795*2)
   Exit: (11) 99 is round(97+0.8758702925960795*2)
   Call: (11) char_code(_17194, 99)
   Exit: (11) char_code(c, 99)
   Call: (11) _17206=[v, c]
   Exit: (11) [v, c]=[v, c]
   Call: (11) lists:member([v, c], [[v, b]])
   Unify: (11) lists:member([v, c], [[v, b]])
   Fail: (11) lists:member([v, c], [[v, b]])
   Redo: (10) randvars(1, 2, [[v, b]], _17212)
   Call: (11) lists:append([[v, b]], [[v, c]], _17216)
   Unify: (11) lists:append([[v, b]], [[v, c]], [[v, b]|_17200])
   Exit: (11) lists:append([[v, b]], [[v, c]], [[v, b], [v, c]])
   Call: (11) _17224 is 1+ -1
   Exit: (11) 0 is 1+ -1
   Call: (11) randvars(0, 2, [[v, b], [v, c]], _17230)
   Unify: (11) randvars(0, 2, [[v, b], [v, c]], [[v, b], [v, c]])
   Exit: (11) randvars(0, 2, [[v, b], [v, c]], [[v, b], [v, c]])
   Exit: (10) randvars(1, 2, [[v, b]], [[v, b], [v, c]])
   Exit: (9) randvars(2, 2, [], [[v, b], [v, c]])
   Call: (9) populatevars([[v, b], [v, c]], 2, [], _17230)
   Unify: (9) populatevars([[v, b], [v, c]], 2, [], _17230)
   Call: (10) randvars2(2, 2, [], _17230)
   Unify: (10) randvars2(2, 2, [], _17230)
   Call: (11) random:random(_17224)
   Unify: (11) random:random(_17224)
   Call: (12) _17224 is random_float
   Exit: (12) 0.9905487027815254 is random_float
   Exit: (11) random:random(0.9905487027815254)
   Call: (11) _17246 is round(97+0.9905487027815254*2)
   Exit: (11) 99 is round(97+0.9905487027815254*2)
   Call: (11) char_code(_17246, 99)
   Exit: (11) char_code(c, 99)
   Call: (11) atom_string(c, _17248)
   Exit: (11) atom_string(c, "c")
   Call: (11) lists:member("c", [])
   Fail: (11) lists:member("c", [])
   Redo: (10) randvars2(2, 2, [], _17258)
   Call: (11) lists:append([], ["c"], _17262)
   Unify: (11) lists:append([], ["c"], ["c"])
   Exit: (11) lists:append([], ["c"], ["c"])
   Call: (11) _17264 is 2+ -1
   Exit: (11) 1 is 2+ -1
   Call: (11) randvars2(1, 2, ["c"], _17270)
   Unify: (11) randvars2(1, 2, ["c"], _17270)
   Call: (12) random:random(_17264)
   Unify: (12) random:random(_17264)
   Call: (13) _17264 is random_float
   Exit: (13) 0.5970644307576888 is random_float
   Exit: (12) random:random(0.5970644307576888)
   Call: (12) _17286 is round(97+0.5970644307576888*2)
   Exit: (12) 98 is round(97+0.5970644307576888*2)
   Call: (12) char_code(_17286, 98)
   Exit: (12) char_code(b, 98)
   Call: (12) atom_string(b, _17288)
   Exit: (12) atom_string(b, "b")
   Call: (12) lists:member("b", ["c"])
   Unify: (12) lists:member("b", ["c"])
   Fail: (12) lists:member("b", ["c"])
   Redo: (11) randvars2(1, 2, ["c"], _17298)
   Call: (12) lists:append(["c"], ["b"], _17302)
   Unify: (12) lists:append(["c"], ["b"], ["c"|_17286])
   Exit: (12) lists:append(["c"], ["b"], ["c", "b"])
   Call: (12) _17310 is 1+ -1
   Exit: (12) 0 is 1+ -1
   Call: (12) randvars2(0, 2, ["c", "b"], _17316)
   Unify: (12) randvars2(0, 2, ["c", "b"], ["c", "b"])
   Exit: (12) randvars2(0, 2, ["c", "b"], ["c", "b"])
   Exit: (11) randvars2(1, 2, ["c"], ["c", "b"])
   Exit: (10) randvars2(2, 2, [], ["c", "b"])
   Call: (10) lists:append([], [[[v, b], ["c", "b"]]], _17332)
   Unify: (10) lists:append([], [[[v, b], ["c", "b"]]], [[[v, b], ["c", "b"]]])
   Exit: (10) lists:append([], [[[v, b], ["c", "b"]]], [[[v, b], ["c", "b"]]])
   Call: (10) populatevars([[v, c]], 2, [[[v, b], ["c", "b"]]], _17334)
   Unify: (10) populatevars([[v, c]], 2, [[[v, b], ["c", "b"]]], _17334)
   Call: (11) randvars2(2, 2, [], _17334)
   Unify: (11) randvars2(2, 2, [], _17334)
   Call: (12) random:random(_17328)
   Unify: (12) random:random(_17328)
   Call: (13) _17328 is random_float
   Exit: (13) 0.08156498097205207 is random_float
   Exit: (12) random:random(0.08156498097205207)
   Call: (12) _17350 is round(97+0.08156498097205207*2)
   Exit: (12) 97 is round(97+0.08156498097205207*2)
   Call: (12) char_code(_17350, 97)
   Exit: (12) char_code(a, 97)
   Call: (12) atom_string(a, _17352)
   Exit: (12) atom_string(a, "a")
   Call: (12) lists:member("a", [])
   Fail: (12) lists:member("a", [])
   Redo: (11) randvars2(2, 2, [], _17362)
   Call: (12) lists:append([], ["a"], _17366)
   Unify: (12) lists:append([], ["a"], ["a"])
   Exit: (12) lists:append([], ["a"], ["a"])
   Call: (12) _17368 is 2+ -1
   Exit: (12) 1 is 2+ -1
   Call: (12) randvars2(1, 2, ["a"], _17374)
   Unify: (12) randvars2(1, 2, ["a"], _17374)
   Call: (13) random:random(_17368)
   Unify: (13) random:random(_17368)
   Call: (14) _17368 is random_float
   Exit: (14) 0.0934625988191671 is random_float
   Exit: (13) random:random(0.0934625988191671)
   Call: (13) _17390 is round(97+0.0934625988191671*2)
   Exit: (13) 97 is round(97+0.0934625988191671*2)
   Call: (13) char_code(_17390, 97)
   Exit: (13) char_code(a, 97)
   Call: (13) atom_string(a, _17392)
   Exit: (13) atom_string(a, "a")
   Call: (13) lists:member("a", ["a"])
   Unify: (13) lists:member("a", ["a"])
   Exit: (13) lists:member("a", ["a"])
   Call: (13) randvars2(1, 2, ["a"], _17402)
   Unify: (13) randvars2(1, 2, ["a"], _17402)
   Call: (14) random:random(_17396)
   Unify: (14) random:random(_17396)
   Call: (15) _17396 is random_float
   Exit: (15) 0.10844423614956468 is random_float
   Exit: (14) random:random(0.10844423614956468)
   Call: (14) _17418 is round(97+0.10844423614956468*2)
   Exit: (14) 97 is round(97+0.10844423614956468*2)
   Call: (14) char_code(_17418, 97)
   Exit: (14) char_code(a, 97)
   Call: (14) atom_string(a, _17420)
   Exit: (14) atom_string(a, "a")
   Call: (14) lists:member("a", ["a"])
   Unify: (14) lists:member("a", ["a"])
   Exit: (14) lists:member("a", ["a"])
   Call: (14) randvars2(1, 2, ["a"], _17430)
   Unify: (14) randvars2(1, 2, ["a"], _17430)
   Call: (15) random:random(_17424)
   Unify: (15) random:random(_17424)
   Call: (16) _17424 is random_float
   Exit: (16) 0.15626511108000463 is random_float
   Exit: (15) random:random(0.15626511108000463)
   Call: (15) _17446 is round(97+0.15626511108000463*2)
   Exit: (15) 97 is round(97+0.15626511108000463*2)
   Call: (15) char_code(_17446, 97)
   Exit: (15) char_code(a, 97)
   Call: (15) atom_string(a, _17448)
   Exit: (15) atom_string(a, "a")
   Call: (15) lists:member("a", ["a"])
   Unify: (15) lists:member("a", ["a"])
   Exit: (15) lists:member("a", ["a"])
   Call: (15) randvars2(1, 2, ["a"], _17458)
   Unify: (15) randvars2(1, 2, ["a"], _17458)
   Call: (16) random:random(_17452)
   Unify: (16) random:random(_17452)
   Call: (17) _17452 is random_float
   Exit: (17) 0.23425412348298377 is random_float
   Exit: (16) random:random(0.23425412348298377)
   Call: (16) _17474 is round(97+0.23425412348298377*2)
   Exit: (16) 97 is round(97+0.23425412348298377*2)
   Call: (16) char_code(_17474, 97)
   Exit: (16) char_code(a, 97)
   Call: (16) atom_string(a, _17476)
   Exit: (16) atom_string(a, "a")
   Call: (16) lists:member("a", ["a"])
   Unify: (16) lists:member("a", ["a"])
   Exit: (16) lists:member("a", ["a"])
   Call: (16) randvars2(1, 2, ["a"], _17486)
   Unify: (16) randvars2(1, 2, ["a"], _17486)
   Call: (17) random:random(_17480)
   Unify: (17) random:random(_17480)
   Call: (18) _17480 is random_float
   Exit: (18) 0.2395771174504641 is random_float
   Exit: (17) random:random(0.2395771174504641)
   Call: (17) _17502 is round(97+0.2395771174504641*2)
   Exit: (17) 97 is round(97+0.2395771174504641*2)
   Call: (17) char_code(_17502, 97)
   Exit: (17) char_code(a, 97)
   Call: (17) atom_string(a, _17504)
   Exit: (17) atom_string(a, "a")
   Call: (17) lists:member("a", ["a"])
   Unify: (17) lists:member("a", ["a"])
   Exit: (17) lists:member("a", ["a"])
   Call: (17) randvars2(1, 2, ["a"], _17514)
   Unify: (17) randvars2(1, 2, ["a"], _17514)
   Call: (18) random:random(_17508)
   Unify: (18) random:random(_17508)
   Call: (19) _17508 is random_float
   Exit: (19) 0.5822983868661542 is random_float
   Exit: (18) random:random(0.5822983868661542)
   Call: (18) _17530 is round(97+0.5822983868661542*2)
   Exit: (18) 98 is round(97+0.5822983868661542*2)
   Call: (18) char_code(_17530, 98)
   Exit: (18) char_code(b, 98)
   Call: (18) atom_string(b, _17532)
   Exit: (18) atom_string(b, "b")
   Call: (18) lists:member("b", ["a"])
   Unify: (18) lists:member("b", ["a"])
   Fail: (18) lists:member("b", ["a"])
   Redo: (17) randvars2(1, 2, ["a"], _17542)
   Call: (18) lists:append(["a"], ["b"], _17546)
   Unify: (18) lists:append(["a"], ["b"], ["a"|_17530])
   Exit: (18) lists:append(["a"], ["b"], ["a", "b"])
   Call: (18) _17554 is 1+ -1
   Exit: (18) 0 is 1+ -1
   Call: (18) randvars2(0, 2, ["a", "b"], _17560)
   Unify: (18) randvars2(0, 2, ["a", "b"], ["a", "b"])
   Exit: (18) randvars2(0, 2, ["a", "b"], ["a", "b"])
   Exit: (17) randvars2(1, 2, ["a"], ["a", "b"])
   Exit: (16) randvars2(1, 2, ["a"], ["a", "b"])
   Exit: (15) randvars2(1, 2, ["a"], ["a", "b"])
   Exit: (14) randvars2(1, 2, ["a"], ["a", "b"])
   Exit: (13) randvars2(1, 2, ["a"], ["a", "b"])
   Exit: (12) randvars2(1, 2, ["a"], ["a", "b"])
   Exit: (11) randvars2(2, 2, [], ["a", "b"])
   Call: (11) lists:append([[[v, b], ["c", "b"]]], [[[v, c], ["a", "b"]]], _17576)
   Unify: (11) lists:append([[[v, b], ["c", "b"]]], [[[v, c], ["a", "b"]]], [[[v, b], ["c", "b"]]|_17560])
   Exit: (11) lists:append([[[v, b], ["c", "b"]]], [[[v, c], ["a", "b"]]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Call: (11) populatevars([], 2, [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], _17584)
   Unify: (11) populatevars([], 2, [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Exit: (11) populatevars([], 2, [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Exit: (10) populatevars([[v, c]], 2, [[[v, b], ["c", "b"]]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Exit: (9) populatevars([[v, b], [v, c]], 2, [], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Call: (9) _17590 is 2+1+97
   Exit: (9) 100 is 2+1+97
   Call: (9) char_code(_17590, 100)
   Exit: (9) char_code(d, 100)
   Call: (9) _17620=[[[v, d], 1]]
   Exit: (9) [[[v, d], 1]]=[[[v, d], 1]]
^  Call: (9) retractall(debug(_17606))
^  Exit: (9) retractall(debug(_17606))
^  Call: (9) assertz(debug(off))
^  Exit: (9) assertz(debug(off))
^  Call: (9) retractall(totalvars(_17614))
^  Exit: (9) retractall(totalvars(_17614))
^  Call: (9) assertz(totalvars(8))
^  Exit: (9) assertz(totalvars(8))
   Call: (9) caw0([n, f], [[[n, append], 2, 1], [[n, delete], 2, 1], [[n, head], 1, 1], [[n, tail], 1, 1], [[n, member], 1, 1]], 2, [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], [[[v, d], 1]], [], _17648, _17650)
   Unify: (9) caw0([n, f], [[[n, append], 2, 1], [[n, delete], 2, 1], [[n, head], 1, 1], [[n, tail], 1, 1], [[n, member], 1, 1]], 2, [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], [[[v, d], 1]], [], _17648, _17650)
   Call: (10) varnames([[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], [], _17640, [], _17644)
   Unify: (10) varnames([[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], [], _17640, [], _17644)
   Call: (11) [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]]=[_17622|_17624]
   Exit: (11) [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]]=[[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]]
   Call: (11) [[v, b], ["c", "b"]]=[_17628, _17634]
   Exit: (11) [[v, b], ["c", "b"]]=[[v, b], ["c", "b"]]
   Call: (11) lists:append([], [[v, b]], _17664)
   Unify: (11) lists:append([], [[v, b]], [[v, b]])
   Exit: (11) lists:append([], [[v, b]], [[v, b]])
   Call: (11) lists:append([], [["c", "b"]], _17670)
   Unify: (11) lists:append([], [["c", "b"]], [["c", "b"]])
   Exit: (11) lists:append([], [["c", "b"]], [["c", "b"]])
   Call: (11) varnames([[[v, c], ["a", "b"]]], [[v, b]], _17670, [["c", "b"]], _17674)
   Unify: (11) varnames([[[v, c], ["a", "b"]]], [[v, b]], _17670, [["c", "b"]], _17674)
   Call: (12) [[[v, c], ["a", "b"]]]=[_17652|_17654]
   Exit: (12) [[[v, c], ["a", "b"]]]=[[[v, c], ["a", "b"]]]
   Call: (12) [[v, c], ["a", "b"]]=[_17658, _17664]
   Exit: (12) [[v, c], ["a", "b"]]=[[v, c], ["a", "b"]]
   Call: (12) lists:append([[v, b]], [[v, c]], _17694)
   Unify: (12) lists:append([[v, b]], [[v, c]], [[v, b]|_17678])
   Exit: (12) lists:append([[v, b]], [[v, c]], [[v, b], [v, c]])
   Call: (12) lists:append([["c", "b"]], [["a", "b"]], _17706)
   Unify: (12) lists:append([["c", "b"]], [["a", "b"]], [["c", "b"]|_17690])
   Exit: (12) lists:append([["c", "b"]], [["a", "b"]], [["c", "b"], ["a", "b"]])
   Call: (12) varnames([], [[v, b], [v, c]], _17712, [["c", "b"], ["a", "b"]], _17716)
   Unify: (12) varnames([], [[v, b], [v, c]], [[v, b], [v, c]], [["c", "b"], ["a", "b"]], [["c", "b"], ["a", "b"]])
   Exit: (12) varnames([], [[v, b], [v, c]], [[v, b], [v, c]], [["c", "b"], ["a", "b"]], [["c", "b"], ["a", "b"]])
   Exit: (11) varnames([[[v, c], ["a", "b"]]], [[v, b]], [[v, b], [v, c]], [["c", "b"]], [["c", "b"], ["a", "b"]])
   Exit: (10) varnames([[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], [], [[v, b], [v, c]], [], [["c", "b"], ["a", "b"]])
   Call: (10) varnames([[[v, d], 1]], [], _17712, [], _17716)
   Unify: (10) varnames([[[v, d], 1]], [], _17712, [], _17716)
   Call: (11) [[[v, d], 1]]=[_17694|_17696]
   Exit: (11) [[[v, d], 1]]=[[[v, d], 1]]
   Call: (11) [[v, d], 1]=[_17700, _17706]
   Exit: (11) [[v, d], 1]=[[v, d], 1]
   Call: (11) lists:append([], [[v, d]], _17736)
   Unify: (11) lists:append([], [[v, d]], [[v, d]])
   Exit: (11) lists:append([], [[v, d]], [[v, d]])
   Call: (11) lists:append([], [1], _17742)
   Unify: (11) lists:append([], [1], [1])
   Exit: (11) lists:append([], [1], [1])
   Call: (11) varnames([], [[v, d]], _17742, [1], _17746)
   Unify: (11) varnames([], [[v, d]], [[v, d]], [1], [1])
   Exit: (11) varnames([], [[v, d]], [[v, d]], [1], [1])
   Exit: (10) varnames([[[v, d], 1]], [], [[v, d]], [], [1])
^  Call: (10) retractall(outputvars(_17724))
^  Exit: (10) retractall(outputvars(_17724))
^  Call: (10) assertz(outputvars([[v, d]]))
^  Exit: (10) assertz(outputvars([[v, d]]))
   Call: (10) lists:append([[v, b], [v, c]], [[v, d]], _17750)
   Unify: (10) lists:append([[v, b], [v, c]], [[v, d]], [[v, b]|_17734])
   Exit: (10) lists:append([[v, b], [v, c]], [[v, d]], [[v, b], [v, c], [v, d]])
   Call: (10) lists:append([["c", "b"], ["a", "b"]], [[v, d]], _17762)
   Unify: (10) lists:append([["c", "b"], ["a", "b"]], [[v, d]], [["c", "b"]|_17746])
   Exit: (10) lists:append([["c", "b"], ["a", "b"]], [[v, d]], [["c", "b"], ["a", "b"], [v, d]])
   Call: (10) _17782=[[n, f], [["c", "b"], ["a", "b"], [v, d]]]
   Exit: (10) [[n, f], [["c", "b"], ["a", "b"], [v, d]]]=[[n, f], [["c", "b"], ["a", "b"], [v, d]]]
   Call: (10) caw1([[n, f], [["c", "b"], ["a", "b"], [v, d]]], [n, f], [[[n, append], 2, 1], [[n, delete], 2, 1], [[n, head], 1, 1], [[n, tail], 1, 1], [[n, member], 1, 1]], 2, [[v, b], [v, c], [v, d]], [[v, b], [v, c]], [[v, b], [v, c]], _17796, [[[v, d], 1]], [[v, d]], [], _17804, [], _17808)
   Unify: (10) caw1([[n, f], [["c", "b"], ["a", "b"], [v, d]]], [n, f], [[[n, append], 2, 1], [[n, delete], 2, 1], [[n, head], 1, 1], [[n, tail], 1, 1], [[n, member], 1, 1]], 2, [[v, b], [v, c], [v, d]], [[v, b], [v, c]], [[v, b], [v, c]], _17796, [[[v, d], 1]], [[v, d]], [], _17804, [], _17808)
   Call: (11) _17788 is 2+ -1
   Exit: (11) 1 is 2+ -1
   Call: (11) addrules0([[v, b], [v, c]], [[v, d]], [[v, d]], [], _17796)
   Unify: (11) addrules0([[v, b], [v, c]], [[v, d]], [[v, d]], [], _17796)
   Call: (12) [[v, d]]=[_17774|_17776]
   Exit: (12) [[v, d]]=[[v, d]]
   Call: (12) random:random_member(_17794, [[v, b], [v, c]])
   Unify: (12) random:random_member(_17794, [[v, b], [v, c]])
   Call: (13) error:must_be(list, [[v, b], [v, c]])
   Unify: (13) error:must_be(list, [[v, b], [v, c]])
   Exit: (13) error:must_be(list, [[v, b], [v, c]])
   Call: (13) length([[v, b], [v, c]], _17796)
   Unify: (13) length([[v, b], [v, c]], _17796)
   Exit: (13) length([[v, b], [v, c]], 2)
   Call: (13) 2>0
   Exit: (13) 2>0
   Call: (13) _17798 is random(2)
   Exit: (13) 0 is random(2)
   Call: (13) lists:nth0(0, [[v, b], [v, c]], _17802)
   Unify: (13) lists:nth0(0, [[v, b], [v, c]], _17802)
   Exit: (13) lists:nth0(0, [[v, b], [v, c]], [v, b])
   Exit: (12) random:random_member([v, b], [[v, b], [v, c]])
   Call: (12) random:random_member([v, d], [[v, d]])
   Unify: (12) random:random_member([v, d], [[v, d]])
   Call: (13) error:must_be(list, [[v, d]])
   Unify: (13) error:must_be(list, [[v, d]])
   Exit: (13) error:must_be(list, [[v, d]])
   Call: (13) length([[v, d]], _17800)
   Unify: (13) length([[v, d]], _17800)
   Exit: (13) length([[v, d]], 1)
   Call: (13) 1>0
   Exit: (13) 1>0
   Call: (13) _17802 is random(1)
   Exit: (13) 0 is random(1)
   Call: (13) lists:nth0(0, [[v, d]], [v, d])
   Unify: (13) lists:nth0(0, [[v, d]], [v, d])
   Exit: (13) lists:nth0(0, [[v, d]], [v, d])
   Exit: (12) random:random_member([v, d], [[v, d]])
   Call: (12) lists:append([], [[[n, =], [[v, d], [v, b]]]], _17848)
   Unify: (12) lists:append([], [[[n, =], [[v, d], [v, b]]]], [[[n, =], [[v, d], [v, b]]]])
   Exit: (12) lists:append([], [[[n, =], [[v, d], [v, b]]]], [[[n, =], [[v, d], [v, b]]]])
   Call: (12) addrules0([[v, b], [v, c]], [[v, d]], [], [[[n, =], [[v, d], [v, b]]]], _17852)
   Unify: (12) addrules0([[v, b], [v, c]], [[v, d]], [], [[[n, =], [[v, d], [v, b]]]], [[[n, =], [[v, d], [v, b]]]])
   Exit: (12) addrules0([[v, b], [v, c]], [[v, d]], [], [[[n, =], [[v, d], [v, b]]]], [[[n, =], [[v, d], [v, b]]]])
   Exit: (11) addrules0([[v, b], [v, c]], [[v, d]], [[v, d]], [], [[[n, =], [[v, d], [v, b]]]])
   Call: (11) lists:append([], [[[n, =], [[v, d], [v, b]]]], _17848)
   Unify: (11) lists:append([], [[[n, =], [[v, d], [v, b]]]], [[[n, =], [[v, d], [v, b]]]])
   Exit: (11) lists:append([], [[[n, =], [[v, d], [v, b]]]], [[[n, =], [[v, d], [v, b]]]])
   Call: (11) lists:append([[v, b], [v, c]], [[v, d]], _17848)
   Unify: (11) lists:append([[v, b], [v, c]], [[v, d]], [[v, b]|_17832])
   Exit: (11) lists:append([[v, b], [v, c]], [[v, d]], [[v, b], [v, c], [v, d]])
   Call: (11) _17892=[[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]
   Exit: (11) [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]=[[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]
   Call: (11) debug(_17892)
   Unify: (11) debug(off)
   Exit: (11) debug(off)
   Call: (11) interpret(off, [[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _17898)
   Unify: (11) interpret(off, [[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _17898)
   Call: (12) convert_to_grammar_part1([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], _17896)
   Unify: (12) convert_to_grammar_part1([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], _17896)
   Call: (13) convert_to_grammar_part11([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], _17896, [], _17900)
   Unify: (13) convert_to_grammar_part11([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], _17896, [], _17900)
   Call: (14) [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]=[_17878|_17880]
   Exit: (14) [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]=[[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]
   Call: (14) [[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n, =], [[...|...]|...]]]]=[[n, _17896], _17902, "->", _17920]
   Fail: (14) [[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n, =], [[...|...]|...]]]]=[[n, _17896], _17902, "->", _17920]
   Redo: (13) convert_to_grammar_part11([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], _17902, [], _17906)
   Call: (14) [[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n, =], [[...|...]|...]]]]=[[n, _17896], "->", _17914]
   Fail: (14) [[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n, =], [[...|...]|...]]]]=[[n, _17896], "->", _17914]
   Redo: (13) convert_to_grammar_part11([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], _17896, [], _17900)
   Unify: (13) convert_to_grammar_part11([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], _17896, [], _17900)
   Call: (14) [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]=[_17878|_17880]
   Exit: (14) [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]=[[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]
   Call: (14) [[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n, =], [[...|...]|...]]]]=[_17884, _17890, ":-", _17908]
   Exit: (14) [[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n, =], [[...|...]|...]]]]=[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n, =], [[...|...]|...]]]]
   Call: (14) true
   Exit: (14) true
   Call: (14) true
   Exit: (14) true
   Call: (14) true
   Exit: (14) true
   Call: (14) true
   Exit: (14) true
   Call: (14) lists:append([], [[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]], _17938)
   Unify: (14) lists:append([], [[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]], [[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]])
   Exit: (14) lists:append([], [[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]], [[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]])
   Call: (14) convert_to_grammar_part11([], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _17938, [], _17942)
   Unify: (14) convert_to_grammar_part11([], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], [])
   Exit: (14) convert_to_grammar_part11([], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], [])
   Exit: (13) convert_to_grammar_part11([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], [])
   Call: (13) lists:append([[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]], [], _17938)
   Unify: (13) lists:append([[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]], [], [[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]|_17922])
   Exit: (13) lists:append([[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]], [], [[[n, f], [[v, b], [v, c], [v|...]], ":-", [[[...|...]|...]]]])
   Exit: (12) convert_to_grammar_part1([[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]])
   Call: (12) interpret1(off, [[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _17948)
   Unify: (12) interpret1(off, [[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _17948)
^  Call: (13) retractall(debug(_17926))
^  Exit: (13) retractall(debug(_17926))
^  Call: (13) assertz(debug(off))
^  Exit: (13) assertz(debug(off))
^  Call: (13) retractall(cut(_17934))
^  Exit: (13) retractall(cut(_17934))
^  Call: (13) assertz(cut(off))
^  Exit: (13) assertz(cut(off))
   Call: (13) member1([[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _17962)
   Unify: (13) member1([[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _17962)
   Call: (14) cut(off)
   Unify: (14) cut(off)
   Exit: (14) cut(off)
   Call: (14) [[n, f], [["c", "b"], ["a", "b"], [v, d]]]=[_17942, _17948]
   Exit: (14) [[n, f], [["c", "b"], ["a", "b"], [v, d]]]=[[n, f], [["c", "b"], ["a", "b"], [v, d]]]
   Call: (14) [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]=[[[n, f], _17966, ":-", _17984]|_17956]
   Exit: (14) [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]=[[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]]
   Call: (14) length([["c", "b"], ["a", "b"], [v, d]], _18006)
   Unify: (14) length([["c", "b"], ["a", "b"], [v, d]], _18006)
   Exit: (14) length([["c", "b"], ["a", "b"], [v, d]], 3)
   Call: (14) length([[v, b], [v, c], [v, d]], 3)
   Unify: (14) length([[v, b], [v, c], [v, d]], 3)
   Unify: (14) length([[v, b], [v, c], [v, d]], 3)
   Exit: (14) length([[v, b], [v, c], [v, d]], 3)
   Call: (14) [n, f]=[n, grammar]
   Fail: (14) [n, f]=[n, grammar]
   Redo: (13) member1([[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _18010)
   Call: (14) [n, f]=[n, grammar_part]
   Fail: (14) [n, f]=[n, grammar_part]
   Redo: (13) member1([[n, f], [["c", "b"], ["a", "b"], [v, d]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], [[[n, f], [[v, b], [v, c], [v, d]], ":-", [[[n|...], [...|...]]]]], _18010)
   Call: (14) checkarguments([["c", "b"], ["a", "b"], [v, d]], [[v, b], [v, c], [v, d]], [], _18010, [], _18014)
   Unify: (14) checkarguments([["c", "b"], ["a", "b"], [v, d]], [[v, b], [v, c], [v, d]], [], _18010, [], _18014)
   Call: (15) [["c", "b"], ["a", "b"], [v, d]]=[_17990|_17992]
   Exit: (15) [["c", "b"], ["a", "b"], [v, d]]=[["c", "b"], ["a", "b"], [v, d]]
   Call: (15) expressionnotatom(["c", "b"])
   Unify: (15) expressionnotatom(["c", "b"])
   Call: (16) isvalstrempty(["c", "b"])
   Unify: (16) isvalstrempty(["c", "b"])
   Call: (17) var(["c", "b"])
   Fail: (17) var(["c", "b"])
   Redo: (16) isvalstrempty(["c", "b"])
   Unify: (16) isvalstrempty(["c", "b"])
   Call: (17) isval(["c", "b"])
   Unify: (17) isval(["c", "b"])
   Fail: (17) isval(["c", "b"])
   Redo: (16) isvalstrempty(["c", "b"])
   Unify: (16) isvalstrempty(["c", "b"])
   Fail: (16) isvalstrempty(["c", "b"])
   Redo: (15) expressionnotatom(["c", "b"])
   Unify: (15) expressionnotatom(["c", "b"])
^  Call: (16) not(atom(["c", "b"]))
^  Unify: (16) not(user:atom(["c", "b"]))
^  Exit: (16) not(user:atom(["c", "b"]))
   Call: (16) length(["c", "b"], _18022)
   Unify: (16) length(["c", "b"], _18022)
   Exit: (16) length(["c", "b"], 2)
   Call: (16) 2>=1
   Exit: (16) 2>=1
   Call: (16) expressionnotatom2(["c", "b"])
   Unify: (16) expressionnotatom2(["c", "b"])
   Call: (17) isvalstrempty("c")
   Unify: (17) isvalstrempty("c")
   Call: (18) var("c")
   Fail: (18) var("c")
   Redo: (17) isvalstrempty("c")
   Unify: (17) isvalstrempty("c")
   Call: (18) isval("c")
   Unify: (18) isval("c")
   Fail: (18) isval("c")
   Redo: (17) isvalstrempty("c")
   Unify: (17) isvalstrempty("c")
   Exit: (17) isvalstrempty("c")
   Call: (17) expressionnotatom2(["b"])
   Unify: (17) expressionnotatom2(["b"])
   Call: (18) isvalstrempty("b")
   Unify: (18) isvalstrempty("b")
   Call: (19) var("b")
   Fail: (19) var("b")
   Redo: (18) isvalstrempty("b")
   Unify: (18) isvalstrempty("b")
   Call: (19) isval("b")
   Unify: (19) isval("b")
   Fail: (19) isval("b")
   Redo: (18) isvalstrempty("b")
   Unify: (18) isvalstrempty("b")
   Exit: (18) isvalstrempty("b")
   Call: (18) expressionnotatom2([])
   Unify: (18) expressionnotatom2([])
   Exit: (18) expressionnotatom2([])
   Exit: (17) expressionnotatom2(["b"])
   Exit: (16) expressionnotatom2(["c", "b"])
   Exit: (15) expressionnotatom(["c", "b"])
   Call: (15) [[v, b], [v, c], [v, d]]=[_18006|_18008]
   Exit: (15) [[v, b], [v, c], [v, d]]=[[v, b], [v, c], [v, d]]
^  Call: (15) not(var([v, b]))
^  Unify: (15) not(user:var([v, b]))
^  Exit: (15) not(user:var([v, b]))
   Call: (15) isvar([v, b])
   Unify: (15) isvar([v, b])
   Exit: (15) isvar([v, b])
   Call: (15) putvalue([v, b], ["c", "b"], [], _18042)
   Unify: (15) putvalue([v, b], ["c", "b"], [], _18042)
^  Call: (16) not(isvar([v, b]))
^  Unify: (16) not(user:isvar([v, b]))
   Call: (17) isvar([v, b])
   Unify: (17) isvar([v, b])
   Exit: (17) isvar([v, b])
^  Fail: (16) not(user:isvar([v, b]))
   Redo: (15) putvalue([v, b], ["c", "b"], [], _18042)
   Call: (16) isvar([v, b])
   Unify: (16) isvar([v, b])
   Exit: (16) isvar([v, b])
   Call: (16) isvalstrorundef(["c", "b"])
   Unify: (16) isvalstrorundef(["c", "b"])
   Call: (17) var(["c", "b"])
   Fail: (17) var(["c", "b"])
   Redo: (16) isvalstrorundef(["c", "b"])
   Unify: (16) isvalstrorundef(["c", "b"])
^  Call: (17) not(var(["c", "b"]))
^  Unify: (17) not(user:var(["c", "b"]))
^  Exit: (17) not(user:var(["c", "b"]))
   Call: (17) isval(["c", "b"])
   Unify: (17) isval(["c", "b"])
   Fail: (17) isval(["c", "b"])
   Redo: (16) isvalstrorundef(["c", "b"])
   Unify: (16) isvalstrorundef(["c", "b"])
^  Call: (17) not(var(["c", "b"]))
^  Unify: (17) not(user:var(["c", "b"]))
^  Exit: (17) not(user:var(["c", "b"]))
   Call: (17) expression(["c", "b"])
   Unify: (17) expression(["c", "b"])
   Call: (18) isval(["c", "b"])
   Unify: (18) isval(["c", "b"])
   Fail: (18) isval(["c", "b"])
   Redo: (17) expression(["c", "b"])
   Unify: (17) expression(["c", "b"])
   Unify: (17) expression(["c", "b"])
   Unify: (17) expression(["c", "b"])
^  Call: (18) not(atom(["c", "b"]))
^  Unify: (18) not(user:atom(["c", "b"]))
^  Exit: (18) not(user:atom(["c", "b"]))
   Call: (18) length(["c", "b"], _18058)
   Unify: (18) length(["c", "b"], _18058)
   Exit: (18) length(["c", "b"], 2)
   Call: (18) 2>=1
   Exit: (18) 2>=1
   Call: (18) expression2(["c", "b"])
   Unify: (18) expression2(["c", "b"])
   Call: (19) expression3("c")
   Unify: (19) expression3("c")
   Call: (20) isval("c")
   Unify: (20) isval("c")
   Fail: (20) isval("c")
   Redo: (19) expression3("c")
   Unify: (19) expression3("c")
   Exit: (19) expression3("c")
   Call: (19) expression2(["b"])
   Unify: (19) expression2(["b"])
   Call: (20) expression3("b")
   Unify: (20) expression3("b")
   Call: (21) isval("b")
   Unify: (21) isval("b")
   Fail: (21) isval("b")
   Redo: (20) expression3("b")
   Unify: (20) expression3("b")
   Exit: (20) expression3("b")
   Call: (20) expression2([])
   Unify: (20) expression2([])
   Exit: (20) expression2([])
   Exit: (19) expression2(["b"])
   Exit: (18) expression2(["c", "b"])
   Exit: (17) expression(["c", "b"])
   Exit: (16) isvalstrorundef(["c", "b"])
   Call: (16) updatevar([v, b], ["c", "b"], [], _18062)
   Unify: (16) updatevar([v, b], ["c", "b"], [], _18062)
   Call: (17) lists:member([[v, b], empty], [])
   Fail: (17) lists:member([[v, b], empty], [])
   Redo: (16) updatevar([v, b], ["c", "b"], [], _18062)
^  Call: (17) not(member([[v, b], _18054], []))
^  Unify: (17) not(user:member([[v, b], _18054], []))
^  Exit: (17) not(user:member([[v, b], _18054], []))
   Call: (17) _18054=empty
   Exit: (17) empty=empty
   Call: (17) true
   Exit: (17) true
   Call: (17) lists:append([], [[[v, b], ["c", "b"]]], _18102)
   Unify: (17) lists:append([], [[[v, b], ["c", "b"]]], [[[v, b], ["c", "b"]]])
   Exit: (17) lists:append([], [[[v, b], ["c", "b"]]], [[[v, b], ["c", "b"]]])
   Call: (17) true
   Exit: (17) true
   Call: (17) true
   Exit: (17) true
   Exit: (16) updatevar([v, b], ["c", "b"], [], [[[v, b], ["c", "b"]]])
   Exit: (15) putvalue([v, b], ["c", "b"], [], [[[v, b], ["c", "b"]]])
   Call: (15) checkarguments([["a", "b"], [v, d]], [[v, c], [v, d]], [[[v, b], ["c", "b"]]], _18104, [], _18108)
   Unify: (15) checkarguments([["a", "b"], [v, d]], [[v, c], [v, d]], [[[v, b], ["c", "b"]]], _18104, [], _18108)
   Call: (16) [["a", "b"], [v, d]]=[_18084|_18086]
   Exit: (16) [["a", "b"], [v, d]]=[["a", "b"], [v, d]]
   Call: (16) expressionnotatom(["a", "b"])
   Unify: (16) expressionnotatom(["a", "b"])
   Call: (17) isvalstrempty(["a", "b"])
   Unify: (17) isvalstrempty(["a", "b"])
   Call: (18) var(["a", "b"])
   Fail: (18) var(["a", "b"])
   Redo: (17) isvalstrempty(["a", "b"])
   Unify: (17) isvalstrempty(["a", "b"])
   Call: (18) isval(["a", "b"])
   Unify: (18) isval(["a", "b"])
   Fail: (18) isval(["a", "b"])
   Redo: (17) isvalstrempty(["a", "b"])
   Unify: (17) isvalstrempty(["a", "b"])
   Fail: (17) isvalstrempty(["a", "b"])
   Redo: (16) expressionnotatom(["a", "b"])
   Unify: (16) expressionnotatom(["a", "b"])
^  Call: (17) not(atom(["a", "b"]))
^  Unify: (17) not(user:atom(["a", "b"]))
^  Exit: (17) not(user:atom(["a", "b"]))
   Call: (17) length(["a", "b"], _18116)
   Unify: (17) length(["a", "b"], _18116)
   Exit: (17) length(["a", "b"], 2)
   Call: (17) 2>=1
   Exit: (17) 2>=1
   Call: (17) expressionnotatom2(["a", "b"])
   Unify: (17) expressionnotatom2(["a", "b"])
   Call: (18) isvalstrempty("a")
   Unify: (18) isvalstrempty("a")
   Call: (19) var("a")
   Fail: (19) var("a")
   Redo: (18) isvalstrempty("a")
   Unify: (18) isvalstrempty("a")
   Call: (19) isval("a")
   Unify: (19) isval("a")
   Fail: (19) isval("a")
   Redo: (18) isvalstrempty("a")
   Unify: (18) isvalstrempty("a")
   Exit: (18) isvalstrempty("a")
   Call: (18) expressionnotatom2(["b"])
   Unify: (18) expressionnotatom2(["b"])
   Call: (19) isvalstrempty("b")
   Unify: (19) isvalstrempty("b")
   Call: (20) var("b")
   Fail: (20) var("b")
   Redo: (19) isvalstrempty("b")
   Unify: (19) isvalstrempty("b")
   Call: (20) isval("b")
   Unify: (20) isval("b")
   Fail: (20) isval("b")
   Redo: (19) isvalstrempty("b")
   Unify: (19) isvalstrempty("b")
   Exit: (19) isvalstrempty("b")
   Call: (19) expressionnotatom2([])
   Unify: (19) expressionnotatom2([])
   Exit: (19) expressionnotatom2([])
   Exit: (18) expressionnotatom2(["b"])
   Exit: (17) expressionnotatom2(["a", "b"])
   Exit: (16) expressionnotatom(["a", "b"])
   Call: (16) [[v, c], [v, d]]=[_18100|_18102]
   Exit: (16) [[v, c], [v, d]]=[[v, c], [v, d]]
^  Call: (16) not(var([v, c]))
^  Unify: (16) not(user:var([v, c]))
^  Exit: (16) not(user:var([v, c]))
   Call: (16) isvar([v, c])
   Unify: (16) isvar([v, c])
   Exit: (16) isvar([v, c])
   Call: (16) putvalue([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], _18136)
   Unify: (16) putvalue([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], _18136)
^  Call: (17) not(isvar([v, c]))
^  Unify: (17) not(user:isvar([v, c]))
   Call: (18) isvar([v, c])
   Unify: (18) isvar([v, c])
   Exit: (18) isvar([v, c])
^  Fail: (17) not(user:isvar([v, c]))
   Redo: (16) putvalue([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], _18136)
   Call: (17) isvar([v, c])
   Unify: (17) isvar([v, c])
   Exit: (17) isvar([v, c])
   Call: (17) isvalstrorundef(["a", "b"])
   Unify: (17) isvalstrorundef(["a", "b"])
   Call: (18) var(["a", "b"])
   Fail: (18) var(["a", "b"])
   Redo: (17) isvalstrorundef(["a", "b"])
   Unify: (17) isvalstrorundef(["a", "b"])
^  Call: (18) not(var(["a", "b"]))
^  Unify: (18) not(user:var(["a", "b"]))
^  Exit: (18) not(user:var(["a", "b"]))
   Call: (18) isval(["a", "b"])
   Unify: (18) isval(["a", "b"])
   Fail: (18) isval(["a", "b"])
   Redo: (17) isvalstrorundef(["a", "b"])
   Unify: (17) isvalstrorundef(["a", "b"])
^  Call: (18) not(var(["a", "b"]))
^  Unify: (18) not(user:var(["a", "b"]))
^  Exit: (18) not(user:var(["a", "b"]))
   Call: (18) expression(["a", "b"])
   Unify: (18) expression(["a", "b"])
   Call: (19) isval(["a", "b"])
   Unify: (19) isval(["a", "b"])
   Fail: (19) isval(["a", "b"])
   Redo: (18) expression(["a", "b"])
   Unify: (18) expression(["a", "b"])
   Unify: (18) expression(["a", "b"])
   Unify: (18) expression(["a", "b"])
^  Call: (19) not(atom(["a", "b"]))
^  Unify: (19) not(user:atom(["a", "b"]))
^  Exit: (19) not(user:atom(["a", "b"]))
   Call: (19) length(["a", "b"], _18152)
   Unify: (19) length(["a", "b"], _18152)
   Exit: (19) length(["a", "b"], 2)
   Call: (19) 2>=1
   Exit: (19) 2>=1
   Call: (19) expression2(["a", "b"])
   Unify: (19) expression2(["a", "b"])
   Call: (20) expression3("a")
   Unify: (20) expression3("a")
   Call: (21) isval("a")
   Unify: (21) isval("a")
   Fail: (21) isval("a")
   Redo: (20) expression3("a")
   Unify: (20) expression3("a")
   Exit: (20) expression3("a")
   Call: (20) expression2(["b"])
   Unify: (20) expression2(["b"])
   Call: (21) expression3("b")
   Unify: (21) expression3("b")
   Call: (22) isval("b")
   Unify: (22) isval("b")
   Fail: (22) isval("b")
   Redo: (21) expression3("b")
   Unify: (21) expression3("b")
   Exit: (21) expression3("b")
   Call: (21) expression2([])
   Unify: (21) expression2([])
   Exit: (21) expression2([])
   Exit: (20) expression2(["b"])
   Exit: (19) expression2(["a", "b"])
   Exit: (18) expression(["a", "b"])
   Exit: (17) isvalstrorundef(["a", "b"])
   Call: (17) updatevar([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], _18156)
   Unify: (17) updatevar([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], _18156)
   Call: (18) lists:member([[v, c], empty], [[[v, b], ["c", "b"]]])
   Unify: (18) lists:member([[v, c], empty], [[[v, b], ["c", "b"]]])
   Fail: (18) lists:member([[v, c], empty], [[[v, b], ["c", "b"]]])
   Redo: (17) updatevar([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], _18156)
^  Call: (18) not(member([[v, c], _18148], [[[v, b], ["c", "b"]]]))
^  Unify: (18) not(user:member([[v, c], _18148], [[[v, b], ["c", "b"]]]))
^  Exit: (18) not(user:member([[v, c], _18148], [[[v, b], ["c", "b"]]]))
   Call: (18) _18148=empty
   Exit: (18) empty=empty
   Call: (18) true
   Exit: (18) true
   Call: (18) lists:append([[[v, b], ["c", "b"]]], [[[v, c], ["a", "b"]]], _18196)
   Unify: (18) lists:append([[[v, b], ["c", "b"]]], [[[v, c], ["a", "b"]]], [[[v, b], ["c", "b"]]|_18180])
   Exit: (18) lists:append([[[v, b], ["c", "b"]]], [[[v, c], ["a", "b"]]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Call: (18) true
   Exit: (18) true
   Call: (18) true
   Exit: (18) true
   Exit: (17) updatevar([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Exit: (16) putvalue([v, c], ["a", "b"], [[[v, b], ["c", "b"]]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]])
   Call: (16) checkarguments([[v, d]], [[v, d]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], _18204, [], _18208)
   Unify: (16) checkarguments([[v, d]], [[v, d]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], _18204, [], _18208)
   Call: (17) [[v, d]]=[_18184|_18186]
   Exit: (17) [[v, d]]=[[v, d]]
   Call: (17) expressionnotatom([v, d])
   Unify: (17) expressionnotatom([v, d])
   Call: (18) isvalstrempty([v, d])
   Unify: (18) isvalstrempty([v, d])
   Call: (19) var([v, d])
   Fail: (19) var([v, d])
   Redo: (18) isvalstrempty([v, d])
   Unify: (18) isvalstrempty([v, d])
   Call: (19) isval([v, d])
   Unify: (19) isval([v, d])
   Fail: (19) isval([v, d])
   Redo: (18) isvalstrempty([v, d])
   Unify: (18) isvalstrempty([v, d])
   Fail: (18) isvalstrempty([v, d])
   Redo: (17) expressionnotatom([v, d])
   Unify: (17) expressionnotatom([v, d])
^  Call: (18) not(atom([v, d]))
^  Unify: (18) not(user:atom([v, d]))
^  Exit: (18) not(user:atom([v, d]))
   Call: (18) length([v, d], _18216)
   Unify: (18) length([v, d], _18216)
   Exit: (18) length([v, d], 2)
   Call: (18) 2>=1
   Exit: (18) 2>=1
   Call: (18) expressionnotatom2([v, d])
   Unify: (18) expressionnotatom2([v, d])
   Call: (19) isvalstrempty(v)
   Unify: (19) isvalstrempty(v)
   Call: (20) var(v)
   Fail: (20) var(v)
   Redo: (19) isvalstrempty(v)
   Unify: (19) isvalstrempty(v)
   Call: (20) isval(v)
   Unify: (20) isval(v)
   Fail: (20) isval(v)
   Redo: (19) isvalstrempty(v)
   Unify: (19) isvalstrempty(v)
   Fail: (19) isvalstrempty(v)
   Fail: (18) expressionnotatom2([v, d])
   Redo: (17) expressionnotatom([v, d])
   Unify: (17) expressionnotatom([v, d])
   Call: (18) predicate_or_rule_name([v, d])
   Fail: (18) predicate_or_rule_name([v, d])
   Fail: (17) expressionnotatom([v, d])
   Redo: (16) checkarguments([[v, d]], [[v, d]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], _18204, [], _18208)
   Unify: (16) checkarguments([[v, d]], [[v, d]], [[[v, b], ["c", "b"]], [[v, c], ["a", "b"]]], _18204, [], _18208)
   Call: (17) [[v, d]]=[_18184|_18186]
   Exit: (17) [[v, d]]=[[v, d]]
^  Call: (17) not(var([v, d]))
^  Unify: (17) not(user:var([v, d]))
^  Exit: (17) not(user:var([v, d]))
   Call: (17) isvar([v, d])
   Unify: (17) isvar([v, d])
   Exit: (17) isvar([v, d])
   Call: (17) [[v, d]]=[_18200|_18202]
   Exit: (17) [[v, d]]=[[v, d]]
   Call: (17) expressionnotatom([v, d])
   Unify: (17) expressionnotatom([v, d])
   Call: (18) isvalstrempty([v, d])
   Unify: (18) isvalstrempty([v, d])
   Call: (19) var([v, d])
   Fail: (19) var([v, d])
   Redo: (18) isvalstrempty([v, d])
   Unify: (18) isvalstrempty([v, d])
   Call: (19) isval([v, d])
   Unify: (19) isval([v, d])
   Fail: (19) isval([v, d])
   Redo: (18) isvalstrempty([v, d])
   Unify: (18) isvalstrempty([v, d])
   Fail: (18) isvalstrempty([v, d])
   Redo: (17) expressionnotatom([v, d])
   Unify: (17) expressionnotatom([v, d])
